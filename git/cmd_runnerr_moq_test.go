// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package git

import (
	"bytes"
	"sync"
)

var (
	lockCmdRunnerMockRun sync.RWMutex
)

// Ensure, that CmdRunnerMock does implement CmdRunner.
// If this is not the case, regenerate this file with moq.
var _ CmdRunner = &CmdRunnerMock{}

// CmdRunnerMock is a mock implementation of CmdRunner.
//
//     func TestSomethingThatUsesCmdRunner(t *testing.T) {
//
//         // make and configure a mocked CmdRunner
//         mockedCmdRunner := &CmdRunnerMock{
//             RunFunc: func(stdOut *bytes.Buffer, stdErr *bytes.Buffer) error {
// 	               panic("mock out the Run method")
//             },
//         }
//
//         // use mockedCmdRunner in code that requires CmdRunner
//         // and then make assertions.
//
//     }
type CmdRunnerMock struct {
	// RunFunc mocks the Run method.
	RunFunc func(stdOut *bytes.Buffer, stdErr *bytes.Buffer) error

	// calls tracks calls to the methods.
	calls struct {
		// Run holds details about calls to the Run method.
		Run []struct {
			// StdOut is the stdOut argument value.
			StdOut *bytes.Buffer
			// StdErr is the stdErr argument value.
			StdErr *bytes.Buffer
		}
	}
}

// Run calls RunFunc.
func (mock *CmdRunnerMock) Run(stdOut *bytes.Buffer, stdErr *bytes.Buffer) error {
	if mock.RunFunc == nil {
		panic("CmdRunnerMock.RunFunc: method is nil but CmdRunner.Run was just called")
	}
	callInfo := struct {
		StdOut *bytes.Buffer
		StdErr *bytes.Buffer
	}{
		StdOut: stdOut,
		StdErr: stdErr,
	}
	lockCmdRunnerMockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	lockCmdRunnerMockRun.Unlock()
	return mock.RunFunc(stdOut, stdErr)
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//     len(mockedCmdRunner.RunCalls())
func (mock *CmdRunnerMock) RunCalls() []struct {
	StdOut *bytes.Buffer
	StdErr *bytes.Buffer
} {
	var calls []struct {
		StdOut *bytes.Buffer
		StdErr *bytes.Buffer
	}
	lockCmdRunnerMockRun.RLock()
	calls = mock.calls.Run
	lockCmdRunnerMockRun.RUnlock()
	return calls
}
