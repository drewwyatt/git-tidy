// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package git

import (
	"sync"
)

var (
	lockExecutorMockCommand sync.RWMutex
)

// Ensure, that ExecutorMock does implement Executor.
// If this is not the case, regenerate this file with moq.
var _ Executor = &ExecutorMock{}

// ExecutorMock is a mock implementation of Executor.
//
//     func TestSomethingThatUsesExecutor(t *testing.T) {
//
//         // make and configure a mocked Executor
//         mockedExecutor := &ExecutorMock{
//             CommandFunc: func(name string, args ...string) CmdRunner {
// 	               panic("mock out the Command method")
//             },
//         }
//
//         // use mockedExecutor in code that requires Executor
//         // and then make assertions.
//
//     }
type ExecutorMock struct {
	// CommandFunc mocks the Command method.
	CommandFunc func(name string, args ...string) CmdRunner

	// calls tracks calls to the methods.
	calls struct {
		// Command holds details about calls to the Command method.
		Command []struct {
			// Name is the name argument value.
			Name string
			// Args is the args argument value.
			Args []string
		}
	}
}

// Command calls CommandFunc.
func (mock *ExecutorMock) Command(name string, args ...string) CmdRunner {
	if mock.CommandFunc == nil {
		panic("ExecutorMock.CommandFunc: method is nil but Executor.Command was just called")
	}
	callInfo := struct {
		Name string
		Args []string
	}{
		Name: name,
		Args: args,
	}
	lockExecutorMockCommand.Lock()
	mock.calls.Command = append(mock.calls.Command, callInfo)
	lockExecutorMockCommand.Unlock()
	return mock.CommandFunc(name, args...)
}

// CommandCalls gets all the calls that were made to Command.
// Check the length with:
//     len(mockedExecutor.CommandCalls())
func (mock *ExecutorMock) CommandCalls() []struct {
	Name string
	Args []string
} {
	var calls []struct {
		Name string
		Args []string
	}
	lockExecutorMockCommand.RLock()
	calls = mock.calls.Command
	lockExecutorMockCommand.RUnlock()
	return calls
}
